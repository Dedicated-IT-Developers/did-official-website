"""
Django settings for did project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# # Prevents unnecessary environment modifications in production.
# if DEBUG==True:
#     from dotenv import load_dotenv
#     load_dotenv()
    
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("Missing SECRET_KEY in environment variables")

# SECURITY WARNING: don't run with debug turned on in production!
# ----------------------
# Debug Settings
# ----------------------
debug_env = os.getenv('DEBUG', 'false')  # Default to 'false' if DEBUG is not set
DEBUG = debug_env.lower() in ['true', '1', 'yes'] # Convert to boolean

# -------------------
# Allowed Hosts
# -------------------
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Prevents an attacker from using a fake domain to exploit Django.
SECURE_HOST = os.getenv('SECURE_HOST')
if SECURE_HOST and SECURE_HOST not in ALLOWED_HOSTS and SECURE_HOST != 'did.confired.com':
    ALLOWED_HOSTS.append(SECURE_HOST)


# Application definition

INSTALLED_APPS = [
    # 'jazzmin',
    'django_select2',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users.apps.UsersConfig',
    'abouts.apps.AboutsConfig',
]

# JAZZMIN_SETTINGS = {
#     "site_title": "DiD Admin Panel",
#     "site_header": "DiD Admin",
#     "welcome_sign": "Welcome to DiD Admin",
#     "show_ui_builder": False,  # Hide UI builder
#     "icons": {
#         "auth.User": "fas fa-users",
#         "auth.Group": "fas fa-users-cog",
#         # Add custom icons for models if needed
#     },
#     "order_with_respect_to": ["auth", "abouts"],  # Order of sidebar apps
#     "show_sidebar": True,  # Ensure sidebar is visible
#     "navigation_expanded": True,  # Keep sidebar open
#     "theme": "darkly",
#     "site_logo": "did-logo.png",
# }

# -------------------
# Custom User Model
# -------------------
AUTH_USER_MODEL = 'users.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'users.middleware.LogIPMiddleware',
]

ROOT_URLCONF = 'did.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'did.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if os.getenv('DB_ENGINE') == 'django.db.backends.sqlite3':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif os.getenv('DB_ENGINE') == 'django.db.backends.postgresql':
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DB_ENGINE'),
            'NAME': os.getenv('DB_NAME'),
            'USER': os.getenv('DB_USER'),
            'PASSWORD': os.getenv('DB_PASSWORD'),
            'HOST': os.getenv('DB_HOST'),
            'PORT': os.getenv('DB_PORT'),
            # For MySQL
            'OPTIONS': {
                #'charset': 'utf8',  # Change utf8mb4 to utf8
                #'init_command': "SET default_storage_engine=INNODB",
                'sql_mode': 'STRICT_TRANS_TABLES'
            }
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ----------------------
# AUTHENTICATION
# ----------------------
LOGIN_URL = '/user/login/'      # Redirect unauthenticated users to this URL
LOGIN_REDIRECT_URL = '/'        # Redirect to the homepage after login
LOGOUT_REDIRECT_URL = '/'

# ----------------------
# File upload config
# ----------------------
MEDIA_URL = os.getenv('UPLOAD_DIR', default='media')
MEDIA_ROOT = os.getenv('MEDIA_ROOT', os.path.join(BASE_DIR, 'media'))  # Default to os.path.join(BASE_DIR, 'media') if MEDIA_ROOT is not set
FILE_UPLOAD_PERMISSIONS = 0o640  # Read/write for owner, read-only for group
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

# ----------------------
# Email Configuration
# ----------------------
if not DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS')
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL')
EMAIL_HOST_USER = os.getenv('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASS')
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# ----------------------
# Session Configuration
# ----------------------
SESSION_COOKIE_HTTPONLY = not DEBUG  # True in Production, False in Development
SESSION_COOKIE_SECURE = not DEBUG   # True in Production, False in Development
SESSION_COOKIE_SAMESITE = 'strict' if not DEBUG else 'lax'  # strict in Production, lax in Development
SESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies'

# ----------------------
# CSRF Protection
# ----------------------
CSRF_COOKIE_HTTPONLY = not DEBUG  # True in Production, False in Development
CSRF_COOKIE_SECURE = not DEBUG   # True in Production, False in Development
CSRF_COOKIE_SAMESITE = 'strict' if not DEBUG else 'lax'  # strict in Production, lax in Development
# If using Django behind a proxy, set trusted origins to avoid CSRF bypass
# Prevents cross-origin request forgery on admin/login pages.
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', 'https://did.confired.com').split(',')

# ----------------------
# Security Features
# ----------------------
SECURE_SSL_REDIRECT = not DEBUG  # Redirect to HTTPS in Production, not in Development
SECURE_BROWSER_XSS_FILTER = not DEBUG  # Enable XSS filter in Production, disable in Development
SECURE_CONTENT_TYPE_NOSNIFF = not DEBUG  # Prevent content type sniffing in Production
X_FRAME_OPTIONS = 'DENY' if not DEBUG else 'SAMEORIGIN'  # DENY in Production, SAMEORIGIN in Development

# ----------------------
# Proxy/Load Balancer Support
# ----------------------
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Trust reverse proxies in Production
else:
    SECURE_PROXY_SSL_HEADER = None  # No proxy configuration in Development

# ----------------------
# Logger
# ----------------------
# import os
# import logging
# import logging.handlers
# import stat

# LOGGING_DIR = os.path.join(BASE_DIR, 'logs')

# # Ensure logging directory exists with secure permissions
# if not os.path.exists(LOGGING_DIR):
#     os.makedirs(LOGGING_DIR, exist_ok=True)
#     os.chmod(LOGGING_DIR, stat.S_IRUSR | stat.S_IWUSR | stat.S_IXUSR)  # Secure directory permissions

# # Define log file paths
# DEBUG_LOG_FILE = os.path.join(LOGGING_DIR, 'django_debug.log')
# ERROR_LOG_FILE = os.path.join(LOGGING_DIR, 'django_errors.log')

# # Ensure log files exist with secure permissions
# for log_file in [DEBUG_LOG_FILE, ERROR_LOG_FILE]:
#     if not os.path.exists(log_file):
#         with open(log_file, 'w'):
#             pass  # Create the file
#     os.chmod(log_file, stat.S_IRUSR | stat.S_IWUSR)  # Set secure file permissions

# # Conditional logging level
# LOGGING_LEVEL = 'DEBUG' if DEBUG else 'INFO'

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,  # Keeps third-party logs
#     'formatters': {
#         'verbose': {
#             'format': '{levelname} {asctime} {module} {message}',
#             'style': '{',
#         },
#         'simple': {
#             'format': '{levelname} {message}',
#             'style': '{',
#         },
#     },
#     'handlers': {
#         'debug_file': {
#             'level': LOGGING_LEVEL,
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': DEBUG_LOG_FILE,
#             'when': 'midnight',  # Rotates logs daily
#             'interval': 1,  # Every day
#             'backupCount': 7,  # Keeps last 7 days of logs
#             'formatter': 'verbose',
#             'encoding': 'utf-8',
#         },
#         'error_file': {
#             'level': 'ERROR',
#             'class': 'logging.handlers.TimedRotatingFileHandler',
#             'filename': ERROR_LOG_FILE,
#             'when': 'midnight',
#             'interval': 1,
#             'backupCount': 14,  # Keeps last 14 days of error logs
#             'formatter': 'verbose',
#             'encoding': 'utf-8',
#         },
#         'console': {
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'simple',
#         } if DEBUG else None,  # Console logging only in development
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['debug_file', 'console'] if DEBUG else ['debug_file'],
#             'level': LOGGING_LEVEL,
#             'propagate': True,
#         },
#         'django.request': {
#             'handlers': ['error_file'],
#             'level': 'ERROR',
#             'propagate': False,
#         },
#     },
# }

# # Remove None values (to prevent issues if DEBUG=False)
# LOGGING['handlers'] = {k: v for k, v in LOGGING['handlers'].items() if v is not None}
