# Installation
1. Install Python 3.9 or higher
    - Please see: https://github.com/wilfredpine/Python-Tutorial/blob/main/Chapter%204%20-%20Application%20Development/Python%20Environment.docx for Installing/Using Multiple version of Python on Windows.
if using MySQL: Install MySQL Server (E.g. WAMP, XAMP, MySQL Server Community) && Lib: mysqlclient==2.2.7
2. Clone the project: `git clone https://github.com/Dedicated-IT-Developers/did-official-website.git`
if using MySQL Create database and Import `sample_db/did_mysql.sql`
3. Create Virtual environment (e.g: `py -m venv env`)
4. Activate Virtual environment: (e.g: `env\scripts\activate`)
5. Run: `pip install -r requirements.txt`
6. rename `.env-rename` to `.env`
7. configure the `.env` file
8. run `py manage.py runserver`

# Accounts
## Dashboard / Admin
    http://127.0.0.1:8000/admin
    username:didadmin
    password:didadmin

## User / Member
    http://127.0.0.1:8000/admin
    username:(assigned by admin)
    password:(assigned by admin)
Sample:
    username: aristonmagboo17
    password: DiD@2025
    

# Todos: (Note: Always make Pull request before Push updates)

- Remove the Javascript/Ajax for fetching data (displaying data) into html, just used the Django Template Engine inside html 
    * Projects Page
    * View Projects Page
    * Teams Page
- Teams Page (Sobra laki ng Card)
- Project Page (alternative image if no uploaded)
- Super Admin Inputs Validations 
    * JSON inputs (select2 css) - make it required even in updating
    * Team Profile (1 profile = 1 user only)

Plan
- About (make dynamic)
- Join Us (make dynamic)
- Gallery or Events (For proof of implementations of DiD Projects)
- Announcement / Greetings (to recognized member's achievements)
- Testimonials


//-------------------------------------------------------------------------
Resources
//-------------------------------------------------------------------------
From PostgreSQL > MySQL:
Step 1: Dump Data from PostgreSQL
Run the following command to export your data into a JSON file:
    python manage.py dumpdata --natural-primary --natural-foreign --indent 4 > data.json
Step 2: Update DATABASES Settings for MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'your_mysql_db',
            'USER': 'your_mysql_user',
            'PASSWORD': 'your_mysql_password',
            'HOST': 'localhost',  # or your MySQL host
            'PORT': '3306',  # default MySQL port
            'OPTIONS': {
                'sql_mode': 'STRICT_TRANS_TABLES'
            }
        }
    }
Then, apply migrations again:
    python manage.py migrate
Step 3: Load Data into MySQL
    python manage.py loaddata data.json
Step 4: Verify the Data
Log into your MySQL database:
    mysql -u your_mysql_user -p your_mysql_db

//-------------------------------------------------------------------------
Audit for Security Issues
//-------------------------------------------------------------------------
You can use pip-audit (install if necessary):
    pip install pip-audit
    pip-audit

//-------------------------------------------------------------------------
Generate a requirements.txt
//-------------------------------------------------------------------------
To generate a requirements.txt file that includes only the libraries actually used in your Django project, follow these steps:
1️⃣ Install pipreqs (if not installed)
    pip install pipreqs
2️⃣ Generate requirements.txt for Your Django Project
Run the following command inside your project directory:
    pipreqs . --force
This will scan your Django project and generate a requirements.txt file with only the libraries imported in your code.
3️⃣ (Optional) Remove Unused Dependencies
If you still suspect unused packages, you can check dependencies manually:
    pip uninstall -r requirements.txt --dry-run
This will list the libraries to be removed without actually uninstalling them.
4️⃣ Audit the New requirements.txt
Run:
    pip-audit -r requirements.txt

//-------------------------------------------------------------------------
MySQL to SQLite
//-------------------------------------------------------------------------
Dump Your MySQL Data to JSON
    python manage.py dumpdata --natural-primary --natural-foreign --indent 4 > data.json
Switch to SQLite3 in settings.py
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
Recreate the Database Structure in SQLite
    python manage.py migrate
Load the MySQL Data into SQLite
    python manage.py loaddata data.json
Troubleshooting loaddata
    In VS Code:
        Bottom-right corner → Click on the encoding (e.g., UTF-16, Windows 1252) → Choose "Save with Encoding" → Select UTF-8 → Save the file.

